import { Ed25519Keypair } from "@mysten/sui/keypairs/ed25519";
import { encodeSuiPrivateKey } from "@mysten/sui/cryptography";


function createWallet() {
    // 1Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π
    const keypair = new Ed25519Keypair();
    
    // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º SUI-–∞–¥—Ä–µ—Å
    const address = keypair.toSuiAddress();
    
    // 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    const publicKey = keypair.getPublicKey().toBase64();

    // 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (Base64) —á–µ—Ä–µ–∑ getSecretKey()
    const privateKey = keypair.getSecretKey();


    console.log("‚úÖ –ù–æ–≤—ã–π SUI –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω!");
    console.log("üîπ –ê–¥—Ä–µ—Å: ", address);
    console.log("üîπ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ", publicKey);
    console.log("üîπ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á (Base64): ", privateKey);
    
    return { address, publicKey, privateKey };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–∞
createWallet();
